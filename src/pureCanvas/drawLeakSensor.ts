import { LearkSensorDevice } from "models/devices";
import {
  TEXT_COLOR,
  TEXT_SIZE,
  COLOR_MACHINE1,
  ERROR_COLOR,
} from "../constants";
import { getLeakAttribute } from "../logics/attributeLogics";
import { getLeakStatusText } from "../commons/textbuilder";
import { delayedDeviceAnimation } from "../commons/animation";
import { DictionaryOf } from "../commons/dictionaryOf";
import { drawPath2D } from "./commonDrawing";

const waterDropOffset: DictionaryOf<number[]> = {};
export function drawLeakSensor(
  ctx: CanvasRenderingContext2D,
  device: LearkSensorDevice,
  animationEnabled: boolean
): void {
  const leakStatus = getLeakAttribute(device);

  ctx.beginPath();
  ctx.font = `${TEXT_SIZE}px Arial`;
  ctx.fillStyle = TEXT_COLOR;
  ctx.fillText(
    getLeakStatusText(leakStatus),
    device.textPosition[0],
    device.textPosition[1]
  );

  const pathCloud = [
    new Path2D(
      "m445.754,167.749c-2.254,-6.581 -5.392,-12.694 -9.252,-18.227l5.738,0.012c31.54,0 57.2,-25.66 57.2,-57.2c0,-31.541 -25.66,-57.2 -57.2,-57.2c-1.56,0 -3.136,0.067 -4.716,0.2c-13.518,-20.684 -36.655,-33.334 -61.551,-33.334c-31.954,0 -59.654,20.206 -69.633,49.935c-1.59,-0.156 -3.188,-0.234 -4.788,-0.234c-15.729,0 -30.361,7.718 -39.42,20.067c-4.452,-5.512 -9.5,-10.563 -15.071,-15.026c-17.395,-13.934 -39.273,-21.608 -61.605,-21.608c-21.287,0 -41.558,6.676 -58.619,19.306c-3.329,2.465 -4.03,7.161 -1.567,10.491c2.466,3.329 7.161,4.029 10.49,1.566c14.461,-10.705 31.645,-16.362 49.695,-16.362c29.426,0 55.71,15.094 70.67,38.792l0.926,1.512c3.392,5.635 6.149,11.735 8.173,18.217c-17.757,9.918 -29.286,28.845 -29.286,49.947c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5c0,-17.244 10.433,-32.516 25.982,-38.97c0.023,-0.009 -0.023,0.01 0,0c5.13,-2.127 10.632,-3.23 16.218,-3.23c16.235,0 31.217,9.494 38.167,24.186c0.943,1.996 2.72,3.475 4.853,4.042c2.132,0.566 4.409,0.166 6.22,-1.1c9.894,-6.909 21.51,-10.561 33.593,-10.561c26.854,0 50.264,18.141 56.927,44.116c0.871,3.401 3.944,5.735 7.498,5.633c0,0 1.397,-0.049 1.842,-0.049c32.404,0 58.767,26.363 58.767,58.767s-26.362,58.767 -58.767,58.767s-58.767,-26.363 -58.767,-58.767c0,-4.142 -3.357,-7.5 -7.5,-7.5s-7.5,3.358 -7.5,7.5c0,23.962 11.491,45.284 29.244,58.767l-88.65,0l4.12,-12.359c1.6,-4.8 0.789,-10.115 -2.169,-14.22c-2.958,-4.104 -7.745,-6.555 -12.805,-6.555l-64.466,0c-7.591,0 -14.114,5.415 -15.513,12.874l-3.799,20.259l-73.993,0c-4.143,0 -7.5,3.358 -7.5,7.5s3.357,7.5 7.5,7.5l71.184,0l-15.132,80.708c-0.869,4.63 0.358,9.364 3.367,12.989c3.008,3.625 7.435,5.704 12.145,5.704l38.148,0c0.091,0 0.365,0 0.601,0.279c0.234,0.279 0.187,0.549 0.171,0.639l-14.816,84.911c-0.947,5.679 2.184,10.981 7.613,12.894c1.321,0.466 2.662,0.69 3.976,0.69c4.085,0 7.904,-2.166 10.04,-5.961c0.048,-0.085 0.095,-0.172 0.14,-0.259l60.612,-118.348c2.526,-4.932 2.31,-10.7 -0.581,-15.428s-7.924,-7.551 -13.466,-7.551l-16.375,0c-0.1,0 -0.401,0 -0.636,-0.325c-0.234,-0.325 -0.139,-0.612 -0.107,-0.706l16.745,-50.235l138.171,0c40.675,0 73.767,-33.092 73.767,-73.767c0,-39.502 -31.202,-71.849 -70.253,-73.688zm-104.999,-40.832c-10.508,-15.723 -28.413,-25.517 -47.615,-25.517c-4.74,0 -9.4,0.574 -13.932,1.712c-2.021,-6.166 -4.668,-12.109 -7.854,-17.749c5.677,-11.28 17.403,-18.663 30.198,-18.663c2.809,0 5.607,0.348 8.316,1.033c1.95,0.493 4.021,0.182 5.74,-0.865c1.72,-1.047 2.946,-2.741 3.403,-4.702c6.205,-26.593 29.627,-45.166 56.962,-45.166c17.901,0 34.661,8.222 45.668,21.953c-21.733,8.336 -36.602,29.296 -36.602,53.38c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5c0,-20.507 14.601,-37.952 34.736,-41.54c0.051,-0.008 5.065,-0.66 7.464,-0.66c23.27,0 42.2,18.931 42.2,42.2s-18.931,42.2 -42.185,42.2l-19.734,-0.04c-12.816,-10.412 -29.099,-16.526 -46.548,-16.526c-12.419,0 -24.446,3.074 -35.217,8.95zm-67.663,233.775c-1.6,4.8 -0.789,10.116 2.169,14.22s7.745,6.555 12.805,6.555l16.375,0c0.132,0 0.438,0 0.668,0.375c0.229,0.374 0.089,0.648 0.028,0.766l-50.425,98.456l10.988,-62.965c0.803,-4.602 -0.46,-9.293 -3.466,-12.869c-3.007,-3.577 -7.41,-5.628 -12.083,-5.628l-38.148,0c-0.091,0 -0.367,0 -0.603,-0.283c-0.234,-0.283 -0.184,-0.555 -0.167,-0.645l16.773,-89.456c0.001,-0.005 0.002,-0.009 0.003,-0.014l4.968,-26.497c0.068,-0.37 0.393,-0.638 0.77,-0.638l64.466,0c0.1,0 0.401,0 0.636,0.325c0.234,0.325 0.139,0.611 0.107,0.706l-7.452,22.358c-0.002,0.007 -0.005,0.013 -0.007,0.02l-18.405,55.214z"
    ),
    new Path2D(
      "m110.441,300.2l-16.101,0c-41.539,0 -75.333,-33.794 -75.333,-75.333c0,-41.514 33.755,-75.293 75.259,-75.334c0.142,0.005 0.283,0.009 0.425,0.01c0.004,0 0.007,-0.001 0.011,-0.001c41.373,0.196 74.972,33.907 74.972,75.324c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5c0,-47.276 -36.506,-86.18 -82.808,-90.018c-0.005,-0.365 -0.025,-0.738 -0.025,-1.099c0,-17.117 5.134,-33.57 14.848,-47.581c2.359,-3.404 1.514,-8.077 -1.891,-10.437c-3.406,-2.361 -8.077,-1.514 -10.438,1.891c-11.461,16.532 -17.52,35.94 -17.52,56.126c0,0.362 0.002,0.726 0.006,1.091c-46.316,3.821 -82.839,42.739 -82.839,90.025c0,49.81 40.523,90.333 90.333,90.333l16.102,0c4.142,0 7.5,-3.358 7.5,-7.5c-0.001,-4.139 -3.358,-7.497 -7.501,-7.497z"
    ),
  ];

  const droplets = [
    new Path2D(
      "m44.64,333.333c-4.143,0 -7.5,3.358 -7.5,7.5l0,66.267c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5l0,-66.267c0,-4.142 -3.357,-7.5 -7.5,-7.5z"
    ),
    new Path2D(
      "m152.323,333.333c-4.143,0 -7.5,3.358 -7.5,7.5l0,66.267c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5l0,-66.267c0,-4.142 -3.357,-7.5 -7.5,-7.5z"
    ),
    new Path2D(
      "m98.481,432.733c-4.143,0 -7.5,3.358 -7.5,7.5l0,66.267c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5l0,-66.267c0,-4.142 -3.357,-7.5 -7.5,-7.5z"
    ),
    new Path2D(
      "m367.69,333.333c-4.143,0 -7.5,3.358 -7.5,7.5l0,66.267c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5l0,-66.267c0,-4.142 -3.357,-7.5 -7.5,-7.5z"
    ),
    new Path2D(
      "m475.373,333.333c-4.143,0 -7.5,3.358 -7.5,7.5l0,66.267c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5l0,-66.267c0,-4.142 -3.358,-7.5 -7.5,-7.5z"
    ),
    new Path2D(
      "m421.532,432.733c-4.143,0 -7.5,3.358 -7.5,7.5l0,66.267c0,4.142 3.357,7.5 7.5,7.5s7.5,-3.358 7.5,-7.5l0,-66.267c0,-4.142 -3.357,-7.5 -7.5,-7.5z"
    ),
  ];

  delayedDeviceAnimation(
    device.id,
    (update: boolean) => {
      if (waterDropOffset[device.id] === undefined) {
        waterDropOffset[device.id] = [0, 0, 0, 0, 0, 0];
      }

      if (update) {
        for (let i = 0; i < waterDropOffset[device.id].length; i++) {
          const drop = waterDropOffset[device.id][i];
          if (drop > 10) {
            waterDropOffset[device.id][i] = 0;
          } else {
            waterDropOffset[device.id][i] += Math.ceil(Math.random() * 2);
          }
        }
      }

      if (leakStatus === "wet") {
        drawPath2D(
          ctx,
          pathCloud,
          {
            location: {
              x: device.textPosition[0] + 10,
              y: device.textPosition[1] + 10,
            },
            lineWidth: 2,
            fillStyle: ERROR_COLOR,
            scale: 0.05,
          },
          true
        );
        droplets.forEach((d, i) => {
          drawPath2D(
            ctx,
            [d],
            {
              location: {
                x: device.textPosition[0] + 10,
                y: device.textPosition[1] + 10 + waterDropOffset[device.id][i],
              },
              lineWidth: 2,
              fillStyle: COLOR_MACHINE1,
              scale: 0.05,
            },
            true
          );
        });
      }
    },
    animationEnabled ? 100 : 5000
  );
}
